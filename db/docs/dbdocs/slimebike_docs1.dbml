Project Slimebike {
database_type: 'PostgreSQL'
description: 'Tested on PG 12, needs extensions PostGIS.'
note: '''
### Database for the MisplacedWheels App and Misparkrepo
The database contains geo-tagged (associated with a city/jurisdiction) information about the micromobility companies and the 
parking infractions. The database also contains the submitted reports. 

#### About this documentation 
This documentation was generated using dbdocs.io using the DBML script located in the "./docs/dbdocs" directory of the MisplacedWheels repository. The portal is password protected. To update the documentation, update the DBML and then run "dbdocs build {DBML filename}".

#### Migrate using Flyway
The database uses "flyway" for applying the migrations. The migrations are located in the "./migrations" directory. To apply the migrations use "flyway -configFiles={CONFIG_FILE_LOCATION} migrate", or specifying the parameters on the CLI, like so: "flyway -url=jdbc:postgresql://${MAIN_HOST}:${MAIN_PORT}/${MAIN_DB} -schemas=public -user=${MAIN_USER} -password=${MAIN_PWD} -locations=filesystem:{MIGRATION_FOLDER_PATH} migrate", where MAIN_HOST is database hostname or IP address, MAIN_PORT is the database port, MAIN_DB is the name of the database, MAIN_USER is the database username with appropriate rights, and MAIN_PWD is the database password. 

All schema related database changes must be applied using schema. Data changes maybe applied using Flyway if possible. 

#### To add a new city
Following steps are needed currently to add a new city:
  
  - Add the cities to the city_info table. 
  - Add infractions to infraction_type table. 
  - Add relevant entries to infraction_city_xrtef table including the "No issue" entry.
  - Add geom, and cityname to wa_city_shape table. (This step happens out of flyway, for now)
  - Add company name, if new, to the micromobility_company table. 
  - Add entries in the micromobility_type table, if new. Take an image of the micromobility_type like jump ebike or lime escooter, and crop square and resize to 80px by 80px. Then convert to base64 and save the string in the DB.
  - Add entries in the micromobility_services for these micromobility_types.
  - Add the corresponding micromobility_services entries to the micromobility_city_xref table. 

#### To add a new company for an existing city

  - Add company name, if new, to the micromobility_company table. 
  - Add entries in the micromobility_type table, if new. Take an image of the micromobility_type like jump ebike or lime escooter, and crop square and resize to 80px by 80px. Then convert to base64 and save the string in the DB.
  - Add entries in the micromobility_services for these micromobility_types.
  - Add the corresponding micromobility_services entries to the micromobility_city_xref table. 

#### To add a new infraction to an existing city

  - Add infractions to infraction_type table. 
  - Add relevant entries to infraction_city_xrtef table including the "No issue" entry.

'''
} 

Table "city_info" {
  "city_id" integer [pk, increment]
  "city" text
  "city_contact_no" text
  "city_contact_email" text
  "state" text

  note: 'The cities in our database, so far supported by our app. 
   The cities is the umbrella term for all agencies including cities, universities, private campuses etc.'
}

Table "wa_city_shape" {
  "id" integer [pk, increment]
  "geom" "geometry(MultiPolygon, 4326)"
  "cityname" "character varying(16)"

  note: 'This table contains the shapefiles for the "cities" (refer table `city_info` for description). 
  Only the columns `id` (auto-generated) `geom` and cityname are important.'
}

Table "flyway_schema_history" {
  "installed_rank" integer [not null]
  "version" "character varying(50)"
  "description" "character varying(200)" [not null]
  "type" "character varying(20)" [not null]
  "script" "character varying(1000)" [not null]
  "checksum" integer
  "installed_by" "character varying(100)" [not null]
  "installed_on" timestamp [not null, default: `now()`]
  "execution_time" integer [not null]
  "success" boolean [not null]

Indexes {
  success [type: btree, name: "flyway_schema_history_s_idx"]
}

  note: 'This table is auto-generated by flyway to maintain the history of flyway migrations.'
}

Table "infraction_city_xref" {
  "infractiontype_id" integer [not null]
  "city_id" integer [not null]

  note: 'This table is the cross-referencing (xref) table between city and infractions to 
  avoid the many to many relationship between the two tables. This is less important in the current
  design as new infractions are added for each city even if the infraction text is similar.'
}

Table "infraction_type" {
  "infractiontype_id" integer [pk, increment]
  "infraction_description" text
  "infraction_severity" integer
  "creation_date" text

  note: 'This table contains the infractions. The infraction description is shortened version of a regulation. 
  The infraction severity should be populated by the city, currently between 0 to 10, 10 being the most severe.'
}

Table "micromobility_city_xref" {
  "micromobilityservice_id" integer [not null]
  "city_id" integer [not null]
  "micromobility_city_contact_no" text
  "micromobility_city_contact_email" text
  "start_date" text
  "end_date" text
  "service_area" geography

  Indexes {
    ("micromobilityservice_id", "city_id") [unique]
  }

  note: 'This is the cross-referencing table between cities and micromobility services to avoid the many-to-many relationship. Further, here the city specific contact information can be populated for each micro-mobility service. These can be notified for the report. The `start_date` and `end_date` are meant to capture the dynamic nature of micromobility service and city relationship. A micromobility service can come back to a city (however, this can cause a conflict with the composite primary key). The `service_area` field is not being used. '
}

Table "micromobility_company" {
  "company_id" integer [pk, increment]
  "company_name" text
  "company_contact_no" text
  "company_contact_email" text
  "company_image" text

  note: 'This table contains the information about the micromobility companies. With the dynamic nature of micromobility landscape it is not sure how the Jump (owned by Lime, funded by Uber) relationship can be modeled. The company image here refers to the logo or brand image, not currently populated. The vehicle image is captured elsewhere.'
}

Table "micromobility_services" {
  "micromobilityservice_id" integer [pk, increment]
  "micromobilitytype_id" integer

  note: "A micromobility_service is an implementation of a micromobility_type. This can be melted together with either the micromobility_city_xref or micromobility_type."
}

Table "micromobility_type" {
  "micromobilitytype_id" integer [pk, increment]
  "micromobility_typename" text [note: 'This would be ebike, or escooter etc.']
  "electric_range" double [note: 'optional, range in miles']
  "vehicle_image" text [note: 'vehicle image after resizing to 80x80 pixels and encoding to base64 using a service like: https://www.base64-image.de/']
  "wheel_size" double [note: '']
  "max_power" double [note: 'Maximum motor power in kW']
  "max_speed" double [note: 'Maximum vehicle speed in mph']
  "company_id" integer 

  note: 'This table captures the information related to a micromobility vehicle. Further details in the columns.'
}

Table "misparking_report" {
  "mispark_id" integer [pk, increment]
  "micromobilityservice_id" integer
  "report_datetime" timestamp
  "report_location" geography [note: 'This is the vehicle lng/lat converted to geography using PostGIS functions ST_MakePoint() converted to SRID 4326 using ST_SetSRID().']
  "report_uid" text [note: 'Vehicle unique ID. This is the QR code currently or manually entered by the user where QRcode reader is not supported. Can be the vehicle ID provided by the city.']
  "report_status" text [note: 'This field is not being used currently. But this can be used to track whether the report has been resolved etc.']
  "report_image" text [note: 'The image of the report. This makes the "select * .." query on this table very slow, should be avoided if possible.']
  "city_id" integer
  "notes" text [note: 'The notes or description field in the identification tab of the MisplacedWheels app.']
  "micromobilityservice_ids" integer [note: 'This is actually an array  field in database. DBML did not support arrays at the time of this writing.']

  note: 'This table stores a misparking report along-with the misparking_report_infraction_xref.'
}

Table "misparking_report_infraction_xref" {
  "infractiontype_id" integer [not null]
  "mispark_id" integer [not null]

  Indexes {
    ("infractiontype_id", "mispark_id") [unique]
  }

  note: 'This table is the cross-referencing table between misparking-report and infraction_type to avoid the many-to-many relationship. This tables stores the infractiontype_id(s) for each report.'
}

Ref:"city_info"."city_id" < "infraction_city_xref"."city_id"

Ref:"infraction_type"."infractiontype_id" < "infraction_city_xref"."infractiontype_id"

Ref:"city_info"."city_id" < "micromobility_city_xref"."city_id"

Ref:"micromobility_services"."micromobilityservice_id" < "micromobility_city_xref"."micromobilityservice_id"

Ref:"micromobility_type"."micromobilitytype_id" < "micromobility_services"."micromobilitytype_id"

Ref:"micromobility_company"."company_id" < "micromobility_type"."company_id"

Ref:"infraction_type"."infractiontype_id" < "misparking_report_infraction_xref"."infractiontype_id"

Ref:"misparking_report"."mispark_id" < "misparking_report_infraction_xref"."mispark_id"

Ref:"micromobility_services"."micromobilityservice_id" < "misparking_report"."micromobilityservice_id"
